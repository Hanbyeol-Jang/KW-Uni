


ARM Macro Assembler    Page 1 


    1 00000000                 AREA             pr1, CODE, READONLY
    2 00000000                 ENTRY
    3 00000000         Main
    4 00000000 E59F0110        LDR              r0, value1  ; load value1 to r0
                                                            
    5 00000004 E59F1110        LDR              r1, value2  ; load value2 to r1
                                                            
    6 00000008 E59FC104        LDR              r12, Address1 ; load Address1 t
                                                            o r12
    7 0000000C         
    8 0000000C E1A08080        MOV              r8, r0, LSL#1 
                                                            ; r0 shift to left 
                                                            
    9 00000010 E3580000        CMP              r8, #0      ; compare value1 wi
                                                            th 0 
   10 00000014 058C1000        STREQ            r1,[r12]    ; if value1= 0, sto
                                                            re value2
   11 00000018 0A00003C        BEQ              Endline     ; if value1= 0, go 
                                                            to Endline
   12 0000001C         
   13 0000001C E1A08081        MOV              r8, r1, LSL#1 
                                                            ; r1 shift to left
   14 00000020 E3580000        CMP              r8,#0       ; compare value2 wi
                                                            th 0 
   15 00000024 058C0000        STREQ            r0,[r12]    ; if value2= 0, sto
                                                            re value1 
   16 00000028 0A000038        BEQ              Endline     ; if value2= 0, go 
                                                            to Endline
   17 0000002C         
   18 0000002C E1A0E00F        MOV              lr,pc       ; pc
   19 00000030 EA000002        B                Split_Value ; go to split_value
                                                            
   20 00000034         
   21 00000034 E1320005        TEQ              r2, r5      ; signbit ;r2^r5
   22 00000038 0A00000D        BEQ              Addition    ; if eqaul, go to A
                                                            ddition
   23 0000003C 1A00001C        BNE              Subtraction ; if not equal, go 
                                                            to Subtraction
   24 00000040         
   25 00000040         
   26 00000040         Split_Value                          ; split Value1
   27 00000040 E1A02FA0        MOV              r2, r0, LSR#31 ; store sign bit
                                                            
   28 00000044 E1A03080        MOV              r3, r0, LSL#1 ; store each expo
                                                            nent
   29 00000048 E1A03C23        MOV              r3, r3, LSR#24 ; store each exp
                                                            onent
   30 0000004C E1A04480        MOV              r4, r0, LSL#9 ; store mantissa
   31 00000050 E1A044A4        MOV              r4, r4, LSR#9 ; store mantissa
   32 00000054 E2844502        ADD              r4, r4, #0x800000 
                                                            ; normalize matissa
                                                            
   33 00000058         
   34 00000058 E1A05FA1        MOV              r5, r1, LSR#31 ; split value2
   35 0000005C E1A06081        MOV              r6, r1, LSL#1 ; store sign bit
   36 00000060 E1A06C26        MOV              r6, r6, LSR#24 ; store each exp
                                                            onent
   37 00000064 E1A07481        MOV              r7, r1, LSL#9 ; store each expo
                                                            nent



ARM Macro Assembler    Page 2 


   38 00000068 E1A074A7        MOV              r7, r7, LSR#9 ; store mantissa
   39 0000006C E2877502        ADD              r7, r7, #0x800000 ; normalize m
                                                            antissa
   40 00000070         
   41 00000070 E1A0F00E        MOV              pc,lr       ; return to main
   42 00000074         
   43 00000074         Addition                             ; when eqaul each s
                                                            ign bit
   44 00000074 E1530006        CMP              r3, r6      ; compare exponent
   45 00000078         
   46 00000078 C0438006        SUBGT            r8, r3, r6  ; subtract smaller 
                                                            value from bigger o
                                                            ne
   47 0000007C D0468003        SUBLE            r8, r6, r3  ; subtract bigger v
                                                            alue from smaller o
                                                            ne
   48 00000080         
   49 00000080 C1A07837        MOVGT            r7, r7, LSR r8 ; if exponent of
                                                             value1 is bigger, 
                                                            normalize mantissa 
                                                            of value2
   50 00000084 C0866008        ADDGT            r6, r6, r8  ; and adjust expone
                                                            nt
   51 00000088 D1A04834        MOVLE            r4, r4, LSR r8 ; if exponent of
                                                             value2 is bigger, 
                                                            normalize mantissa 
                                                            of value1 
   52 0000008C D0833008        ADDLE            r3, r3, r8  ; and adjust expone
                                                            nt 
   53 00000090         
   54 00000090 E1A04404        MOV              r4, r4, LSL#8 ; for addition
   55 00000094 E1A07407        MOV              r7, r7, LSL#8 ; for addition
   56 00000098         
   57 00000098 E0949007        ADDS             r9, r4, r7  ; add each mantissa
                                                            , update flag
   58 0000009C 21A094A9        MOVCS            r9, r9, LSR#9 ; if carry update
                                                            d, descend bit and 
                                                            then normalize mant
                                                            issa again
   59 000000A0 22899502        ADDCS            r9, r9, #0x800000 ; if carry up
                                                            dated, descend bit 
                                                            and then normalize 
                                                            mantissa again
   60 000000A4 22833001        ADDCS            r3, r3, #1  ; if carry updated,
                                                             descend bit and th
                                                            en normalize mantis
                                                            sa again
   61 000000A8 31A09429        MOVCC            r9, r9, LSR#8 ; after descendin
                                                            g bit, normalize ma
                                                            ntissa
   62 000000AC         
   63 000000AC E2499502        SUB              r9, r9, #0x800000 ; normalize m
                                                            antissa
   64 000000B0 EA000011        B                Cal_Result  ; go to cal_result
   65 000000B4         
   66 000000B4         Subtraction                          ; when not eqaul ea
                                                            ch sign bit
   67 000000B4 E1530006        CMP              r3, r6      ; compare exponent
   68 000000B8 C0438006        SUBGT            r8, r3, r6  ; subtract smaller 



ARM Macro Assembler    Page 3 


                                                            value from bigger o
                                                            ne
   69 000000BC D0468003        SUBLE            r8, r6, r3  ; subtract bigger v
                                                            alue from smaller o
                                                            ne 
   70 000000C0         
   71 000000C0 C1A07837        MOVGT            r7, r7, LSR r8 ; if exponent of
                                                             value1 is bigger, 
                                                            normalize mantissa 
                                                            of value2
   72 000000C4 C0866008        ADDGT            r6, r6, r8  ; and adjust expone
                                                            nt 
   73 000000C8 D1A04834        MOVLE            r4, r4, LSR r8 ; if exponent of
                                                             value2 is bigger, 
                                                            normalize mantissa 
                                                            of value1
   74 000000CC D0833008        ADDLE            r3, r3, r8  ; and adjust expone
                                                            nt
   75 000000D0         
   76 000000D0 C1A0B002        MOVGT            r11, r2     ; store sign bit of
                                                             bigger exponent in
                                                            to r11
   77 000000D4 D1A0B005        MOVLE            r11, r5     ; store sign bit of
                                                             smaller exponent i
                                                            nto r11
   78 000000D8         
   79 000000D8 E1540007        CMP              r4, r7      ; compare mantissa
   80 000000DC C0449007        SUBGT            r9, r4, r7  ; subtract smaller 
                                                            value from bigger o
                                                            ne
   81 000000E0 D0479004        SUBLE            r9, r7, r4  ; subtract bigger v
                                                            alue from smaller o
                                                            ne
   82 000000E4         
   83 000000E4         Shift_mantissa                       ; shift mantissa   
                                                                    
   84 000000E4 E3590502        CMP              r9,#0x800000 ; compare mantissa
                                                             with operator
   85 000000E8 31A09089        MOVLO            r9, r9, LSL#1 ; normalize manti
                                                            ssa
   86 000000EC 32433001        ADDLO            r3, r3,#-1  ; and adjust expone
                                                            nt
   87 000000F0 3AFFFFFB        BLO              Shift_mantissa ; go to shift_ma
                                                            ntissa for normaliz
                                                            ing mantissa
   88 000000F4 E2499502        SUB              r9, r9, #0x800000 ; if normaliz
                                                            e mantissa, subtrac
                                                            t 1 
   89 000000F8 EAFFFFFF        B                Cal_Result  ; go to cal_result
   90 000000FC         
   91 000000FC         Cal_Result
   92 000000FC E1A0AF8B        MOV              r10, r11, LSL#31 ; sign bit
   93 00000100 E08AAB83        ADD              r10,r10,r3, LSL#23 ; signbit + 
                                                            exponent
   94 00000104 E08AA009        ADD              r10,r10,r9  ; signbit + exponen
                                                            t + mantissa
   95 00000108 E58CA000        STR              r10,[r12]   ; store r10 into r1
                                                            2
   96 0000010C EAFFFFFF        B                Endline



ARM Macro Assembler    Page 4 


   97 00000110         
   98 00000110         Endline
   99 00000110 E3A0F000        MOV              pc,#0
  100 00000114         
  101 00000114 00040000 
                       Address1
                               DCD              &40000      ; Address1 =& 40000
                                                            
  102 00000118 BFC00000 
                       value1  DCD              &bfc00000   ;&41240000 ;&0     
                                                             ; store Value1
  103 0000011C 40380000 
                       value2  DCD              &40380000   ;&40200000 ;&418580
                                                            00 ; store Value2
  104 00000120         
  105 00000120                 END
Command Line: --debug --xref --diag_suppress=9931 --cpu=ARM9E --apcs=interwork 
--depend=.\objects\problem.d -o.\objects\problem.o -IC:\Keil_v5\ARM\RV31\INC -I
C:\Keil_v5\ARM\CMSIS\Include --predefine="__EVAL SETA 1" --predefine="__UVISION
_VERSION SETA 524" --list=.\listings\problem.lst problem.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

Addition 00000074

Symbol: Addition
   Definitions
      At line 43 in file problem.s
   Uses
      At line 22 in file problem.s
Comment: Addition used once
Address1 00000114

Symbol: Address1
   Definitions
      At line 101 in file problem.s
   Uses
      At line 6 in file problem.s
Comment: Address1 used once
Cal_Result 000000FC

Symbol: Cal_Result
   Definitions
      At line 91 in file problem.s
   Uses
      At line 64 in file problem.s
      At line 89 in file problem.s

Endline 00000110

Symbol: Endline
   Definitions
      At line 98 in file problem.s
   Uses
      At line 11 in file problem.s
      At line 16 in file problem.s
      At line 96 in file problem.s

Main 00000000

Symbol: Main
   Definitions
      At line 3 in file problem.s
   Uses
      None
Comment: Main unused
Shift_mantissa 000000E4

Symbol: Shift_mantissa
   Definitions
      At line 83 in file problem.s
   Uses
      At line 87 in file problem.s
Comment: Shift_mantissa used once
Split_Value 00000040

Symbol: Split_Value
   Definitions
      At line 26 in file problem.s
   Uses
      At line 19 in file problem.s
Comment: Split_Value used once



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

Subtraction 000000B4

Symbol: Subtraction
   Definitions
      At line 66 in file problem.s
   Uses
      At line 23 in file problem.s
Comment: Subtraction used once
pr1 00000000

Symbol: pr1
   Definitions
      At line 1 in file problem.s
   Uses
      None
Comment: pr1 unused
value1 00000118

Symbol: value1
   Definitions
      At line 102 in file problem.s
   Uses
      At line 4 in file problem.s
Comment: value1 used once
value2 0000011C

Symbol: value2
   Definitions
      At line 103 in file problem.s
   Uses
      At line 5 in file problem.s
Comment: value2 used once
11 symbols
343 symbols in table
