module multiplier(multiplier,multiplicand,op_start,op_clear,rst,clk,op_done,result);//multiplier
input op_start,op_clear,rst,clk;
input [31:0] multiplier,multiplicand;
output reg op_done;
output[63:0] result;

//register
reg [1:0] state,nextstate;
reg [5:0] exe_count,next_exe_count;				// 연산 횟수   
reg [31:0] u,v,x;
reg [31:0] next_u,next_v, next_x;
reg x_1 , next_x_1;
//wire
wire [31:0] sub,add;

//add,sub,result 정의 
assign add = u + multiplicand;
assign sub = u + (~multiplicand) + 1'b1;
assign result = {u,v};

//Encoded
parameter IDLE = 2'b00;
parameter EXEC = 2'b01;
parameter DONE = 2'b10;

//sequential circuit
always@(posedge clk or negedge rst) begin
	if(~rst) begin//reset이 들어올 경우
			state <= IDLE;//모든 경우 초기화
			x_1 <= 1'b0; 
			u <= 32'b0;
			v <= 32'b0;
			x <= 32'b0;
			exe_count <= 6'b0; 
			end
	else begin
		state <= nextstate;
		exe_count <= next_exe_count;
		x_1 <= next_x_1;
		u <= next_u;
		v <= next_v;
		x <= next_x;
	end
end



always@(op_start,exe_count,op_clear,state,op_done,u,v,x,x_1,add,sub,multiplier) begin // nextstate와 output이 함께 들어간 always 문
	if(op_clear)begin//op_clear가 들어올 경우
			next_exe_count <= 6'b0;
			next_u <= 32'h0;
			next_v <= 32'h0;
			next_x <= 32'b0;
			next_x_1 <= 1'b0;
			nextstate <= IDLE;
			op_done <= 1'b0;
			end
	else begin
				case(state)
						IDLE: begin
							if(op_start && !op_clear) begin//state이거나 clear가 아닐 경우
												nextstate <= EXEC;
												next_exe_count <= 6'b0;
												next_u <= 32'h0;
												next_v <= 32'h0;
												next_x <= multiplier;
												next_x_1 <= 1'b0;
												op_done <= 1'b0; //IDLE => EXEC
												end
							
							else begin
												nextstate <= IDLE;
												next_exe_count <= 6'b0;
												next_u <= 32'b0;
												next_v <= 32'b0;
												next_x <= 32'b0;
												next_x_1 <= 1'b0;
												op_done <= 1'b0;  //IDLE에 머무른다
									end
							
							end
						
						EXEC:  begin//EXEC 상태
							if(op_clear) begin
												nextstate <= IDLE;
												next_exe_count <= 7'b0;
												next_u <= 32'b0;
												next_v <= 32'b0;
												next_x <= 32'b0;
												next_x_1 <= 1'b0;
												op_done <= 1'b0;//EXEC => IDLE
									end
									
							else if(exe_count == 32) begin 
												nextstate <= DONE;
												op_done <= 1'b1;
												next_exe_count <= exe_count;
												next_u <= u;
												next_v <= v;
												next_x <= x;
												next_x_1 <= x_1;//EXEC => DONE
												
									end		
									
							else begin							//EXEC => EXEC
												if({x[0],x_1} == 2'b00) begin //자릿수 비교 bit가 00 일경우 
														next_x_1<= x[0];   		//shift
														next_u <= {u[31],u[31:1]};
														next_v <= {u[0],v[31:1]};
														next_x <= {x[0],x[31:1]};
													end
					
												else if({x[0],x_1} == 2'b01) begin//자릿수 비교 bit가 01 일경우 
														next_x_1 <= x[0];				 // 더하고 shift
														next_u <= {add[31],add[31:1]};
														next_v <= {add[0],v[31:1]};
														next_x <= {x[0],x[31:1]};
													end
					
												else if({x[0],x_1} == 2'b10) begin//자릿수 비교 bit가 10 일경우 
														next_x_1 <= x[0];					//빼고 shift
														next_u <= {sub[31],sub[31:1]};
														next_v <= {sub[0],v[31:1]};
														next_x <= {x[0],x[31:1]};
													end
					
												else if({x[0],x_1} == 2'b11) begin//자릿수 비교 bit가 11 일경우
														next_x_1 <= x[0];				  //shift
														next_u <= {u[31],u[31:1]};
														next_v <= {u[0],v[31:1]};
														next_x <= {x[0],x[31:1]};
													end
												else begin 						
														next_x_1 = 1'b0;
														next_x = 32'b0;
														next_u = 32'b0;
														next_v = 32'b0;
													end
				
										op_done = 1'b0; 					
										next_exe_count = exe_count + 6'b000001;//count 증가
										nextstate <=EXEC; //EXEC => EXEC
													
									end
							end
						DONE: begin		//DONE 상태
							if(op_clear) begin 			//DONE => IDLE
										nextstate <= IDLE;
										next_exe_count <= 6'b0;
										next_u <= 32'b0;
										next_v <= 32'b0;
										next_x <= 32'b0;
										next_x_1 <= 1'b0;
										op_done <= 1'b0;
										end
										
							else if(op_start) begin	//DONE => EXEC
										nextstate <= EXEC;
										next_exe_count <= 6'b0;
										next_u <= 32'h0;
										next_v <= 32'h0;
										next_x <= multiplier;
										next_x_1 <= 1'b0;
										op_done <= 1'b0; 
										end
							
							else begin 
											nextstate <= DONE;//DONE에 머무를 경우
											op_done <= 1'b1;
											next_exe_count <= exe_count;
											next_u <= u;
											next_v <= v;
											next_x <= x;
											next_x_1 <= x_1;
							end
							
						end
						default : begin  //default 경우
											nextstate <= 2'bxx;
											op_done <= 1'bx;
											next_exe_count <= 6'bx;
											next_u <= 32'bx;
											next_v <=32'bx;
											next_x <= 32'bx;
											next_x_1 <= 1'bx;
							end
		
				endcase
		end
end



endmodule		